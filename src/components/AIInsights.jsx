import { useState } from 'react'
import { geminiService, isGeminiConfigured } from '../lib/gemini'
import { Brain, Loader2, AlertCircle, Lightbulb, TrendingUp, Shield, Target } from 'lucide-react'

const AIInsights = ({ drug, type = 'drug', data = null }) => {
  const [insights, setInsights] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const generateInsights = async () => {
    if (!isGeminiConfigured()) {
      setError('AI insights are not available. Gemini API is not configured.')
      return
    }

    setLoading(true)
    setError(null)

    try {
      let result
      
      switch (type) {
        case 'drug':
          result = await geminiService.analyzeDrugMarket(drug)
          break
        case 'regulatory':
          result = await geminiService.analyzeRegulatoryImpact(data)
          break
        case 'market':
          result = await geminiService.analyzeMarketTrends(data.marketStats, data.healthData)
          break
        case 'investment':
          result = await geminiService.generateInvestmentInsights(data.drugs, data.marketStats)
          break
        default:
          throw new Error('Invalid insight type')
      }

      if (result.success) {
        setInsights(result.data)
      } else {
        setError(result.error || 'Failed to generate insights')
      }
    } catch (err) {
      setError(err.message || 'An error occurred while generating insights')
    } finally {
      setLoading(false)
    }
  }

  const getInsightIcon = () => {
    switch (type) {
      case 'drug': return TrendingUp
      case 'regulatory': return Shield
      case 'market': return Target
      case 'investment': return Lightbulb
      default: return Brain
    }
  }

  const getInsightTitle = () => {
    switch (type) {
      case 'drug': return 'Drug Market Analysis'
      case 'regulatory': return 'Regulatory Impact Analysis'
      case 'market': return 'Market Trend Analysis'
      case 'investment': return 'Investment Insights'
      default: return 'AI Insights'
    }
  }

  const Icon = getInsightIcon()

  if (!isGeminiConfigured()) {
    return (
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <div className="flex items-center space-x-2 text-gray-500">
          <AlertCircle className="w-5 h-5" />
          <span className="text-sm">AI insights are not available in demo mode</span>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-6">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
            <Icon className="w-4 h-4 text-purple-600" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900">{getInsightTitle()}</h3>
        </div>
        
        {!insights && (
          <button
            onClick={generateInsights}
            disabled={loading}
            className="flex items-center space-x-2 bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? (
              <>
                <Loader2 className="w-4 h-4 animate-spin" />
                <span>Analyzing...</span>
              </>
            ) : (
              <>
                <Brain className="w-4 h-4" />
                <span>Generate AI Insights</span>
              </>
            )}
          </button>
        )}
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
          <div className="flex items-center space-x-2">
            <AlertCircle className="w-5 h-5 text-red-500" />
            <p className="text-sm text-red-800">{error}</p>
          </div>
        </div>
      )}

      {insights && (
        <div className="space-y-4">
          <div className="prose prose-sm max-w-none">
            <div className="whitespace-pre-line text-gray-700 leading-relaxed">
              {insights}
            </div>
          </div>
          
          <div className="flex items-center justify-between pt-4 border-t border-gray-200">
            <div className="flex items-center space-x-2 text-sm text-gray-500">
              <Brain className="w-4 h-4" />
              <span>Generated by Gemini AI</span>
            </div>
            
            <button
              onClick={() => {
                setInsights(null)
                setError(null)
              }}
              className="text-sm text-purple-600 hover:text-purple-700 font-medium"
            >
              Generate New Analysis
            </button>
          </div>
        </div>
      )}

      {!insights && !loading && !error && (
        <div className="text-center py-8">
          <Brain className="w-12 h-12 text-gray-300 mx-auto mb-4" />
          <p className="text-gray-500 mb-4">
            Get AI-powered insights and analysis powered by Google Gemini
          </p>
          <p className="text-sm text-gray-400">
            Click "Generate AI Insights" to get started
          </p>
        </div>
      )}
    </div>
  )
}

export default AIInsights